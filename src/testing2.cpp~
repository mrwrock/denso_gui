#include <ros/ros.h>
#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/PCLPointCloud2.h>
#include <pcl/point_types.h>
#include <pcl/filters/voxel_grid.h>
#include <string>
#include <tf/transform_broadcaster.h>
#include <pcl/conversions.h>
#include "pcl_ros/transforms.h"
#include <iostream>
#include <pcl/filters/passthrough.h>
#include <pcl/io/pcd_io.h>
#include "std_msgs/String.h"
#include <sstream>
#include <pcl/filters/extract_indices.h>
#include <pcl/octree/octree.h>
#include <vector>
#include <ctime>
#include <boost/make_shared.hpp>
#include <pcl/point_representation.h>
#include <pcl/filters/filter.h>
#include <pcl/features/normal_3d.h>
#include <pcl/registration/icp.h>
#include <pcl/registration/registration.h>
#include <pcl/registration/icp_nl.h>
#include <pcl/registration/transforms.h>
#include <pcl/visualization/pcl_visualizer.h>

#define DEBUG 0
 int cloudctr = 0;
//convenient typedefs
typedef pcl::PointXYZ PointT;
typedef pcl::PointCloud<PointT> PointCloud;
typedef pcl::PointNormal PointNormalT;
typedef pcl::PointCloud<PointNormalT> PointCloudWithNormals;


  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudA (new pcl::PointCloud<pcl::PointXYZI> );
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudB (new pcl::PointCloud<pcl::PointXYZI> );
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudC (new pcl::PointCloud<pcl::PointXYZI> );
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudD (new pcl::PointCloud<pcl::PointXYZI> );
//convenient structure to handle our pointclouds
struct PCD
{
  PointCloud::Ptr cloud;
  std::string f_name;

  PCD() : cloud (new PointCloud) {};
};


////////////////////////////////////////////////////////////////////////////////
/** \brief Align a pair of PointCloud datasets and return the result
  * \param cloud_src the source PointCloud
  * \param cloud_tgt the target PointCloud
  * \param output the resultant aligned source PointCloud
  * \param final_transform the resultant transform between source and target
  */
void pairAlign (const PointCloud::Ptr cloud_src, const PointCloud::Ptr cloud_tgt, PointCloud::Ptr output, Eigen::Matrix4f &final_transform, bool downsample = false)
{

  pcl::IterativeClosestPoint<pcl::PointXYZ, pcl::PointXYZ> icp;
  icp.setInputSource (cloud_src);
  icp.setInputTarget (cloud_tgt);
//  typedef pcl::registration::TransformationEstimationLM <pcl::PointXYZ, pcl::PointXYZ> te;
//  boost::shared_ptr<te> teLM (new te);
//  icp.setTransformationEstimation (teLM);
  
pcl::registration::CorrespondenceEstimation<pcl::PointXYZ, pcl::PointXYZ>::Ptr ce (new pcl::registration::CorrespondenceEstimation<pcl::PointXYZ, pcl::PointXYZ>);
ce->setInputSource (cloud_src);
ce->setInputTarget (cloud_tgt);
icp.setCorrespondenceEstimation (ce);

icp.setMaximumIterations(1000);
  icp.setRANSACIterations(100);
  pcl::PointCloud<pcl::PointXYZ> Final;
  icp.align (Final);
  std::cout << "has converged:" << icp.hasConverged() << " score: " << icp.getFitnessScore() << std::endl;
  std::cout << icp.getFinalTransformation() << std::endl;
  std::cout << "max iterations" << icp.getMaximumIterations() << " ransac: " << icp.getRANSACIterations()<< " ransacT: " << icp.getRANSACOutlierRejectionThreshold() <<" cordis: " << icp.getMaxCorrespondenceDistance() <<" tep: " << icp.getTransformationEpsilon() <<" euc: " << icp.getEuclideanFitnessEpsilon() << std::endl;    
  Eigen::Matrix4f T;
  Eigen::Matrix4f Ti = Eigen::Matrix4f::Identity (), prev, targetToSource;
  T = icp.getFinalTransformation();
  // Get the transformation from target to source
  targetToSource = T.inverse();
  // Transform target back in source frame
  pcl::transformPointCloud (*cloud_tgt, *output, targetToSource);
  final_transform = targetToSource;
}


int
main (int argc, char** argv)
{
  // Initialize ROS
  ros::init (argc, argv, "my_pcl_tutorial");
  ros::NodeHandle nh;

  ros::Publisher pub;
  ros::Publisher pub1;
  ros::Publisher pub2;
  ros::Publisher pub3;

  pcl::PointCloud<pcl::PointXYZI>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZI>);
  pcl::PointCloud<pcl::PointXYZI>::Ptr marker (new pcl::PointCloud<pcl::PointXYZI>);
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudA_filtered (new pcl::PointCloud<pcl::PointXYZI> );
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudB_filtered (new pcl::PointCloud<pcl::PointXYZI> );
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudC_filtered (new pcl::PointCloud<pcl::PointXYZI> );
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudD_filtered (new pcl::PointCloud<pcl::PointXYZI> );

  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudA_aligned (new pcl::PointCloud<pcl::PointXYZI> );
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudB_aligned (new pcl::PointCloud<pcl::PointXYZI> );
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudC_aligned (new pcl::PointCloud<pcl::PointXYZI> );
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudD_aligned (new pcl::PointCloud<pcl::PointXYZI> );
  // Create a ROS publisher for the output point cloud
  pub = nh.advertise<sensor_msgs::PointCloud2> ("aligned_1", 1);
  pub1 = nh.advertise<sensor_msgs::PointCloud2> ("aligned_2", 1);
  pub2 = nh.advertise<sensor_msgs::PointCloud2> ("aligned_3", 1);
  pub3 = nh.advertise<sensor_msgs::PointCloud2> ("aligned_4", 1);

  //* load a file
    if (pcl::io::loadPCDFile<pcl::PointXYZI> ("/home/mike/marker/marker.pcd", *marker) == -1) 
    {
      PCL_ERROR ("Couldn't read file test_pcd.pcd \n");

      return(0);
    }
    if (pcl::io::loadPCDFile<pcl::PointXYZI> ("/home/mike/marker/pcd1.pcd", *cloudA) == -1) 
    {
      PCL_ERROR ("Couldn't read file test_pcd.pcd \n");

      return(0);
    }
    if (pcl::io::loadPCDFile<pcl::PointXYZI> ("/home/mike/marker/pcd2.pcd", *cloudB) == -1) 
    {
      PCL_ERROR ("Couldn't read file test_pcd.pcd \n");

      return(0);
    }
    if (pcl::io::loadPCDFile<pcl::PointXYZI> ("/home/mike/marker/pcd3.pcd", *cloudC) == -1) 
    {
      PCL_ERROR ("Couldn't read file test_pcd.pcd \n");

      return(0);
    }
    if (pcl::io::loadPCDFile<pcl::PointXYZI> ("/home/mike/marker/pcd4.pcd", *cloudD) == -1) 
    {
      PCL_ERROR ("Couldn't read file test_pcd.pcd \n");

      return(0);
    }

  
 
  
// Create the filtering object
  pcl::PassThrough<pcl::PointXYZI> pass;
  pass.setInputCloud (cloudA);
  pass.setFilterFieldName ("intensity");
  pass.setFilterLimits (1000, 1500);
  //pass.setFilterLimitsNegative (true);
  pass.filter (*cloudA_filtered);

  pass.setInputCloud (cloudB);
  pass.setFilterFieldName ("intensity");
  pass.setFilterLimits (1000, 1500);
  //pass.setFilterLimitsNegative (true);
  pass.filter (*cloudB_filtered);

  pass.setInputCloud (cloudC);
  pass.setFilterFieldName ("intensity");
  pass.setFilterLimits (1000, 1500);
  //pass.setFilterLimitsNegative (true);
  pass.filter (*cloudC_filtered);

  pass.setInputCloud (cloudD);
  pass.setFilterFieldName ("intensity");
  pass.setFilterLimits (1000, 1500);
  //pass.setFilterLimitsNegative (true);
  pass.filter (*cloudD_filtered);

///////////////////////////////////////////////


PointCloud::Ptr result1 (new PointCloud), source1 (new PointCloud), target1 (new PointCloud);
  Eigen::Matrix4f GlobalTransform1 = Eigen::Matrix4f::Identity (), pairTransform1;

  // Fill in the cloud data
  source1->width  = cloudA_filtered->width;
  source1->height = cloudA_filtered->height;
  source1->points.resize (cloudA_filtered->width * cloudA_filtered->height);
std::cout << "Done Resizing" << std::endl;
  for (size_t i = 0; i < source1->points.size (); ++i)
  {
    source1->points[i].x = cloudA_filtered->points[i].x;
    source1->points[i].y = cloudA_filtered->points[i].y;
    source1->points[i].z = cloudA_filtered->points[i].z;
  }

  // Fill in the cloud data
  target1->width  = marker->width;
  target1->height = marker->height;
  target1->points.resize (marker->width * marker->height);

  for (size_t i = 0; i < target1->points.size (); ++i)
  {
    target1->points[i].x = marker->points[i].x;
    target1->points[i].y = marker->points[i].y;
    target1->points[i].z = marker->points[i].z;
  }


    PointCloud::Ptr temp1 (new PointCloud);
    pairAlign (source1, target1, temp1, pairTransform1, false);
std::cout << "Done Aligning" << std::endl;
  pcl::transformPointCloud (*cloudA, *cloudA_aligned, pairTransform1);

////////////////////////////////////////

///////////////////////////////////////////////


PointCloud::Ptr result2 (new PointCloud), source2 (new PointCloud), target2 (new PointCloud);
  Eigen::Matrix4f GlobalTransform2 = Eigen::Matrix4f::Identity (), pairTransform2;

  // Fill in the cloud data
  source2->width  = cloudB_filtered->width;
  source2->height = cloudB_filtered->height;
  source2->points.resize (cloudB_filtered->width * cloudB_filtered->height);
std::cout << "Done Resizing" << std::endl;
  for (size_t i = 0; i < source2->points.size (); ++i)
  {
    source2->points[i].x = cloudB_filtered->points[i].x;
    source2->points[i].y = cloudB_filtered->points[i].y;
    source2->points[i].z = cloudB_filtered->points[i].z;
  }

  // Fill in the cloud data
  target2->width  = marker->width;
  target2->height = marker->height;
  target2->points.resize (marker->width * marker->height);

  for (size_t i = 0; i < target2->points.size (); ++i)
  {
    target2->points[i].x = marker->points[i].x;
    target2->points[i].y = marker->points[i].y;
    target2->points[i].z = marker->points[i].z;
  }


    PointCloud::Ptr temp2 (new PointCloud);
    pairAlign (source2, target2, temp2, pairTransform2, false);
std::cout << "Done Aligning" << std::endl;
  pcl::transformPointCloud (*cloudB, *cloudB_aligned, pairTransform2);

////////////////////////////////////////



PointCloud::Ptr result3 (new PointCloud), source3 (new PointCloud), target3 (new PointCloud);
  Eigen::Matrix4f GlobalTransform3 = Eigen::Matrix4f::Identity (), pairTransform3;

  // Fill in the cloud data
  source3->width  = cloudC_filtered->width;
  source3->height = cloudC_filtered->height;
  source3->points.resize (cloudC_filtered->width * cloudC_filtered->height);
std::cout << "Done Resizing" << std::endl;
  for (size_t i = 0; i < source3->points.size (); ++i)
  {
    source3->points[i].x = cloudC_filtered->points[i].x;
    source3->points[i].y = cloudC_filtered->points[i].y;
    source3->points[i].z = cloudC_filtered->points[i].z;
  }

  // Fill in the cloud data
  target3->width  = marker->width;
  target3->height = marker->height;
  target3->points.resize (marker->width * marker->height);

  for (size_t i = 0; i < target3->points.size (); ++i)
  {
    target3->points[i].x = marker->points[i].x;
    target3->points[i].y = marker->points[i].y;
    target3->points[i].z = marker->points[i].z;
  }


    PointCloud::Ptr temp3 (new PointCloud);
    pairAlign (source3, target3, temp3, pairTransform3, false);
std::cout << "Done Aligning" << std::endl;
  pcl::transformPointCloud (*cloudC, *cloudC_aligned, pairTransform3);

////////////////////////////////////////



PointCloud::Ptr result4 (new PointCloud), source4 (new PointCloud), target4 (new PointCloud);
  Eigen::Matrix4f GlobalTransform4 = Eigen::Matrix4f::Identity (), pairTransform4;

  // Fill in the cloud data
  source4->width  = cloudD_filtered->width;
  source4->height = cloudD_filtered->height;
  source4->points.resize (cloudD_filtered->width * cloudD_filtered->height);
std::cout << "Done Resizing" << std::endl;
  for (size_t i = 0; i < source4->points.size (); ++i)
  {
    source4->points[i].x = cloudD_filtered->points[i].x;
    source4->points[i].y = cloudD_filtered->points[i].y;
    source4->points[i].z = cloudD_filtered->points[i].z;
  }

  // Fill in the cloud data
  target4->width  = marker->width;
  target4->height = marker->height;
  target4->points.resize (marker->width * marker->height);

  for (size_t i = 0; i < target4->points.size (); ++i)
  {
    target4->points[i].x = marker->points[i].x;
    target4->points[i].y = marker->points[i].y;
    target4->points[i].z = marker->points[i].z;
  }


    PointCloud::Ptr temp4 (new PointCloud);
    pairAlign (source4, target4, temp4, pairTransform4, false);
std::cout << "Done Aligning" << std::endl;
  pcl::transformPointCloud (*cloudD, *cloudD_aligned, pairTransform4);

////////////////////////////////////////
/*
   sensor_msgs::PointCloud2 output1;
  pcl::toROSMsg(*cloudA_aligned, output1);
output1.header.frame_id = "base_link";
   sensor_msgs::PointCloud2 output2;
  pcl::toROSMsg(*cloudB_aligned, output2);
output2.header.frame_id = "base_link";
   sensor_msgs::PointCloud2 output3;
  pcl::toROSMsg(*cloudC_aligned, output3);
output3.header.frame_id = "base_link";
   sensor_msgs::PointCloud2 output4;
  pcl::toROSMsg(*cloudD_aligned, output4);
output4.header.frame_id = "base_link";
  
*/


   sensor_msgs::PointCloud2 output1;
  pcl::toROSMsg(*temp1, output1);
output1.header.frame_id = "base_link";
   sensor_msgs::PointCloud2 output2;
  pcl::toROSMsg(*temp2, output2);
output2.header.frame_id = "base_link";
   sensor_msgs::PointCloud2 output3;
  pcl::toROSMsg(*temp3, output3);
output3.header.frame_id = "base_link";
   sensor_msgs::PointCloud2 output4;
  pcl::toROSMsg(*temp4, output4);
output4.header.frame_id = "base_link";

// Publish the data
  pub.publish (output1);
  pub1.publish (output2);
  pub2.publish (output3);
  pub3.publish (output4);
ros::spinOnce();
std::cout << "Done" << std::endl;


}
